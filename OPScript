local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local CurrentVersion = "Infinite Mining Incremental v1"

local Window = Fluent:CreateWindow({
    Title = CurrentVersion,
    SubTitle = "by ngw12345",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

-- Local Var List

-- Fluent provides Lucide Icons, they are optional
local Tabs = {
    Teleports = Window:AddTab({ Title = "Teleports", Icon = "rocket" }),
    AutoFarm = Window:AddTab({ Title = "Automation", Icon = "crown" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)


local running = false

local AutoFarmToggle = Tabs.AutoFarm:AddToggle("AutoFarmToggle", {
    Title = "AutoFarm",
    Description = "AutoClicks Fast",
    Default = false,
    Callback = function(state)
        running = state

        if running then
            task.spawn(function()
                while running do
                    local remote = game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunctions"):FindFirstChild("PlayerClick")
                    if remote then
                        remote:InvokeServer()
                    end
                    wait() -- adjust speed here
                end
            end)
        end
    end
})

local running = false

local AutoFarmToggle = Tabs.AutoFarm:AddToggle("AutoFarmToggle", {
    Title = "AutoFarm",
    Description = "Farms money using RewardCooldown",
    Default = false,
    Callback = function(state)
        running = state

        if running then
            task.spawn(function()
                while running do
                    local remote = game:GetService("ReplicatedStorage")
                        :WaitForChild("RemoteFunctions")
                        :FindFirstChild("GetPlayerAttribute")

                    if remote then
                        remote:InvokeServer("RewardCooldown")
                    end

                    wait() -- Adjust delay as needed
                end
            end)
        end
    end
})

local buying = false

local upgradeList = {
    "More Money",
    "More Luck",
    "Less Cooldown",
    "More Money 2",
    "More Luck 2",
    "Critical Chance",
    "Critical Multiplier",
    "Break Faster"
}

local AutoBuyToggle = Tabs.AutoFarm:AddToggle("AutoBuyToggle", {
    Title = "AutoBuy Upgrades",
    Description = "Automatically buys all upgrades repeatedly.",
    Default = false,
    Callback = function(state)
        buying = state

        if buying then
            task.spawn(function()
                while buying do
                    local remote = game:GetService("ReplicatedStorage")
                        :WaitForChild("RemoteFunctions")
                        :WaitForChild("Upgrade")

                    for _, upgradeName in ipairs(upgradeList) do
                        pcall(function()
                            remote:InvokeServer(upgradeName)
                        end)
                        wait() -- Small delay between each purchase
                    end

                    wait() -- Wait before doing the next full cycle
                end
            end)
        end
    end
})

local rebirthing = false

local AutoRebirthToggle = Tabs.AutoFarm:AddToggle("AutoRebirthToggle", {
    Title = "Auto Rebirth",
    Description = "Automatically rebirths over time.",
    Default = false,
    Callback = function(state)
        rebirthing = state

        if rebirthing then
            task.spawn(function()
                while rebirthing do
                    pcall(function()
                        local remote = game:GetService("ReplicatedStorage")
                            :WaitForChild("RemoteFunctions")
                            :WaitForChild("Rebirth")

                        remote:InvokeServer()
                    end)

                    wait() -- Adjust if needed based on cooldowns
                end
            end)
        end
    end
})

local shardBuying = false

local shardUpgrades = {
    "PermLuck",
    "PermMoney",
    "MoreShards"
}

local AutoShardBuyToggle = Tabs.AutoFarm:AddToggle("AutoShardBuyToggle", {
    Title = "Auto Buy Shards",
    Description = "Automatically buys all shard upgrades.",
    Default = false,
    Callback = function(state)
        shardBuying = state

        if shardBuying then
            task.spawn(function()
                while shardBuying do
                    local remote = game:GetService("ReplicatedStorage")
                        :WaitForChild("RemoteFunctions")
                        :WaitForChild("RainbowShardUpgrade")

                    for _, upgradeName in ipairs(shardUpgrades) do
                        pcall(function()
                            remote:InvokeServer(upgradeName)
                        end)
                        wait() -- Delay between each shard upgrade
                    end

                    wait() -- Wait before repeating the full upgrade cycle
                end
            end)
        end
    end
})
