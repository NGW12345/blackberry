local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local CurrentVersion = "Infinite Mining Incremental v1"

local Window = Fluent:CreateWindow({
    Title = CurrentVersion,
    SubTitle = "by ngw12345",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

-- Local Var List
local rootPart = game.Workspace.ngw12345.HumanoidRootPart

-- Fluent provides Lucide Icons, they are optional
local Tabs = {
    Teleports = Window:AddTab({ Title = "Teleports", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "AutoFarm", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

local isAutoFarm = false

-- Utility: Find the closest ore roughly straight below the player within verticalRange
local function getClosestOreBelow(verticalRange, toleranceRadius)
    local rootPos = rootPart.Position
    local closestOre = nil
    local closestDistance = math.huge

    for _, ore in pairs(workspace.Ores:GetChildren()) do
        if ore:IsA("Part") then
            local orePos = ore.Position
            local verticalDistance = rootPos.Y - orePos.Y
            if verticalDistance > 0 and verticalDistance <= verticalRange then
                -- Check horizontal distance from rootPart.XZ to ore.XZ
                local horizontalDist = (Vector3.new(rootPos.X, 0, rootPos.Z) - Vector3.new(orePos.X, 0, orePos.Z)).Magnitude

                -- Only consider ores roughly straight below within a small horizontal radius (toleranceRadius)
                if horizontalDist <= toleranceRadius and verticalDistance < closestDistance then
                    closestDistance = verticalDistance
                    closestOre = ore
                end
            end
        end
    end

    return closestOre
end

-- Add Toggle to Tabs.AutoFarm
local FarmToggle = Tabs.AutoFarm:AddToggle("AutoFarmToggle", {
    Title = "AutoFarm (Straight Down)",
    Description = "Automatically mines ores straight down below you",
    Default = false,
    Callback = function(state)
        isAutoFarm = state
        print(isAutoFarm and "AutoFarm Enabled" or "AutoFarm Disabled")
    end
})

-- Background mining loop
task.spawn(function()
    while true do
        if isAutoFarm then
            local verticalRange = 30     -- How far down to check
            local toleranceRadius = 4    -- How close horizontally it must be to count as 'straight down'

            local ore = getClosestOreBelow(verticalRange, toleranceRadius)
            if ore then
                local args = { ore }
                game:GetService("ReplicatedStorage").Events.MineOre:FireServer(unpack(args))
                task.wait(0.05) -- slight delay between mining
            else
                task.wait(0.1) -- no ore found, wait a bit longer
            end
        else
            task.wait(0.15)
        end
    end
end)

local selectedOre = 1
local isAutoMining = false
local miningThread = nil

-- Dropdown for ore selection
local Dropdown = Tabs.AutoFarm:AddDropdown("OreDropdown", {
    Title = "Select Ore",
    Description = "Choose the ore to mine",
    Values = {"Chest", "10", "101101", "11", "12", "14", "Abyssal Stone", "Alagamite", "Alternatus", "Ambrosia", "Ammolite", "Aqueduelis Blue", "Aqueduelis Red", "Augelite", "Blue", "Chronoverde", "Coal", "Constellatium", "Copper", "Core", "Cordierite", "Crimsonstone", "Crookesite", "Celsian", "Datolite", "Darkmatter", "Darkstone", "Decayium", "Devilline", "Diamond", "Dragonglass", "Duskium", "Eclipse", "Ekanite", "Evorium", "Firecrystal", "Fracturium", "Galactium", "Galactic Shard", "Garnet", "Glitchite", "Glitchite Reborn", "Green", "Indicolite", "Indigo", "Inferno", "Iron", "Jasper", "Lightning Crystal", "Lithium", "Lucentium", "Lunalyx", "Malachite", "Marble", "Masslock", "Mineralite", "Mintite", "Miroite", "Morganite", "Nautilus", "Nautilus Evolved", "Niedermayrite", "Obamite", "Orange", "Platinum", "Plutonium", "Radiant Quartz", "Rainbonite", "Rainbonium", "Realgar", "REDACTED", "Red", "Redlinite", "Redrum", "Rozenite", "Royalty", "Ruby", "Serenity", "Shadowite", "Solar Blossom", "Spongebob", "Stone", "Stellarite", "Superium", "Taaffeite", "Timeite", "Voltiblue", "Violet", "Void Crystals", "Wadsleyite", "Warped Coal", "Yellow", "Yumium"},
    Multi = false,
    Default = 1,
    Callback = function(value)
        selectedOre = value
    end
})
local miningRange = 10 -- Adjust this to your game's mining distance limit
local teleportedOres = {}

local TeleportAndMineToggle = Tabs.AutoFarm:AddToggle("TeleportAndMineSelectedOre", {
    Title = "Teleport & Mine Selected Ore",
    Description = "Teleports selected ore near you if too far, then mines it",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                while state do
                    if not rootPart or not rootPart.Parent or not selectedOre then
                        task.wait(0.5)
                    else
                        local oresFolder = workspace:FindFirstChild("Ores")
                        if oresFolder then
                            for _, ore in pairs(oresFolder:GetChildren()) do
                                if ore.Name == selectedOre and ore:IsA("BasePart") and ore.Parent then
                                    local dist = (ore.Position - rootPart.Position).Magnitude

                                    if dist > miningRange then
                                        -- Teleport ore visually near player to be in mining range
                                        ore.CFrame = rootPart.CFrame - Vector3.new(0, 3, 0)
                                        teleportedOres[ore] = true
                                        dist = (ore.Position - rootPart.Position).Magnitude -- update distance
                                    elseif teleportedOres[ore] and dist <= miningRange then
                                        teleportedOres[ore] = nil -- reset if close enough
                                    end

                                    if dist <= miningRange then
                                        -- Mine the ore
                                        game:GetService("ReplicatedStorage").Events.MineOre:FireServer(ore)

                                        -- Wait for ore to disappear or timeout
                                        local startTime = tick()
                                        while ore.Parent and (tick() - startTime < 3) do
                                            task.wait(0.1)
                                        end

                                        task.wait(0.2) -- small delay before next ore
                                    end
                                end
                            end
                        end
                        task.wait(0.3)
                    end
                end
            end)
        else
            teleportedOres = {}
        end
    end
})
