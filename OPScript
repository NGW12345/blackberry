local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local CurrentVersion = "Infinite Mining Incremental v1"
local Window = Fluent:CreateWindow({
    Title = CurrentVersion,
    SubTitle = "by ngw12345",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})
local Tabs = {
    Teleports = Window:AddTab({ Title = "Teleports", Icon = "rocket" }),
    AutoFarm = Window:AddTab({ Title = "Automation", Icon = "crown" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1)

local Toggle = Tabs.AutoFarm:AddToggle("PickupRadiusToggle", 
{
    Title = "Huge Pickup Radius", 
    Description = "Keeps PickupRadius size forced to (0.001, 2000, 2000)",
    Default = false,
    Callback = function(state)
        local player = game:GetService("Players").LocalPlayer

        if state then
            print("Pickup Radius ON")
            getgenv().PickupRadiusRunning = true

            task.spawn(function()
                while getgenv().PickupRadiusRunning do
                    local character = player.Character or player.CharacterAdded:Wait()
                    local pickupRadius = character:FindFirstChild("PickupRadius")

                    if pickupRadius and pickupRadius:IsA("BasePart") then
                        pickupRadius.Size = Vector3.new(0.001, 2000, 2000)
                    end

                    task.wait(0.1) -- constantly enforce it (adjust speed if needed)
                end
            end)
        else
            print("Pickup Radius OFF")
            getgenv().PickupRadiusRunning = false
        end
    end 
})
local Toggle = Tabs.AutoFarm:AddToggle("SpeedToggle", 
{
    Title = "Super Speed", 
    Description = "Sets your WalkSpeed to 100",
    Default = false,
    Callback = function(state)
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")

        if state then
            print("Speed Toggle ON")
            getgenv().SpeedToggleRunning = true
            getgenv().OriginalSpeed = humanoid.WalkSpeed

            task.spawn(function()
                while getgenv().SpeedToggleRunning do
                    if humanoid then
                        humanoid.WalkSpeed = 100
                    end
                    task.wait(0.1) -- keep enforcing in case server resets it
                end
            end)
        else
            print("Speed Toggle OFF")
            getgenv().SpeedToggleRunning = false
            if humanoid and getgenv().OriginalSpeed then
                humanoid.WalkSpeed = getgenv().OriginalSpeed
            end
        end
    end 
})
local Toggle = Tabs.AutoFarm:AddToggle("AutoClickToggle", 
{
    Title = "Auto Click", 
    Description = "Automatically clicks using the Click remote",
    Default = false,
    Callback = function(state)
        if state then
            print("Auto Click ON")
            getgenv().AutoClick = true

            task.spawn(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local clickEvent = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Click")

                while getgenv().AutoClick do
                    clickEvent:FireServer()
                    task.wait() -- spams every frame (change to 0.1 for slower clicks)
                end
            end)
        else
            print("Auto Click OFF")
            getgenv().AutoClick = false
        end
    end 
})

local Toggle = Tabs.AutoFarm:AddToggle("AutoUpgradeToggle", 
{
    Title = "Auto Upgrades", 
    Description = "Automatically buys max upgrades for StickCooldown, CollectAmount, and MaxCapacity",
    Default = false,
    Callback = function(state)
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local valuesFolder = player:WaitForChild("Values")
        local upgradeRemote = ReplicatedStorage:WaitForChild("Events"):WaitForChild("BuyMaxUpgrade")

        if state then
            print("Auto Upgrade ON")
            getgenv().AutoUpgrade = true

            task.spawn(function()
                while getgenv().AutoUpgrade do
                    -- List of all upgrades
                    local upgrades = {"StickCooldown", "CollectAmount", "MaxCapacity"}

                    for _, upgrade in ipairs(upgrades) do
                        local args = { upgrade, valuesFolder:WaitForChild("Sticks") }
                        upgradeRemote:FireServer(unpack(args))
                        task.wait(0.1) -- slight delay between upgrades
                    end

                    task.wait(0.5) -- main loop delay
                end
            end)
        else
            print("Auto Upgrade OFF")
            getgenv().AutoUpgrade = false
        end
    end 
})
local Toggle = Tabs.AutoFarm:AddToggle("AutoRebirthUpgradeToggle", 
{
    Title = "Auto Rebirth Upgrades", 
    Description = "Automatically buys max upgrades for CollectAmountReb, RadiusReb, and StickCooldownReb",
    Default = false,
    Callback = function(state)
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local valuesFolder = player:WaitForChild("Values")
        local upgradeRemote = ReplicatedStorage:WaitForChild("Events"):WaitForChild("BuyMaxUpgrade")

        if state then
            print("Auto Rebirth Upgrade ON")
            getgenv().AutoRebirthUpgrade = true

            task.spawn(function()
                while getgenv().AutoRebirthUpgrade do
                    -- List of rebirth upgrades
                    local upgrades = {"CollectAmountReb", "RadiusReb", "StickCooldownReb"}

                    for _, upgrade in ipairs(upgrades) do
                        local args = { upgrade, valuesFolder:WaitForChild("Rebirths") }
                        upgradeRemote:FireServer(unpack(args))
                        task.wait(0.1) -- slight delay between each upgrade
                    end

                    task.wait(0.5) -- loop delay
                end
            end)
        else
            print("Auto Rebirth Upgrade OFF")
            getgenv().AutoRebirthUpgrade = false
        end
    end 
})
